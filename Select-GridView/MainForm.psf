<File version="3.1">
  <FileID>030044f2-6f08-4f26-a708-9555961852c7</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAC7vSURBVHhe7d13dNXnnefxzE5mT87+s3/sH7Mn
u5spZybZmUniJJOJ42QSJ5PEno3tNMcpbhSDe28Ud4wxGGPTbQwYUyUkAUIN1HvvvberK+mqo4Zt
jP3Z5/lJMiCubcDIBp73+5zXEbq693fv74qj5/u7RfoCERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERERER
ERERERERERERERERERERERERERERERERERERERERERERERERERERkaNlGW1/9Vd/1fbNb36j7bY5
c9rmzZsPAAAuAnfcfnvbT668su2LX/xi21/8xV+0mTW90VvdP6m//Mu/DHzlK1/RH264QStWvqL0
3FI1tPV66lt7AADABaqhvU9VDe3aszdCs2bN0lf/8R9lDug1ucR/Ym03mMU//ECMiuq7lVbWqrTS
ZgAAcBFILWlWUUNAaVmFun3+fH3pS186Nrm+f3zf+PrX2154caWKzeKfWtKkNMN+BAAAFz67bicX
N6qkqVch4Qf0gyuuOLMBYM6cOW2p2SXKLG9TupkkAADAxSeluEn17b1avOiJMxsA5s+f39bSOagM
OwCUtQAAgIuQfSrA3/+2GQCePPMBoM0MAPYRgAyzAQAAcPGxrwfw9Yxp4cLFZz4AtHYOKKui3QwB
rQAAnHfZle3Kq/Erv3bm5FZ3mLWszbs++zG32hf0fOeL3Z/sqhNr52e9j9PZRwF8vXYAWHQ2A8Cg
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
aM9K/en7P9APfnSlvveLX+mBrdFqbPN/+qP2zl6N1sXrvvse0EPbs9XbH5Av2PnOEAMAERE51UwN
AD5zpO9vitYjV9+nXal16hkya1zSBt279FlFFbVrcHDIe/fB6OiQers61N4R0PCI/dw6oj7vtG4d
GTQL7eiwBro71GY+HxyeOM8Rc/mx2ljddtsdum93uY7rPY0OBNQR5LacCQYAIiJyqpkcALoaIzXv
R7/UnGXR8o+MaHRsXONDg+oLdKn04Ku6bc5szblricJymhWoOKiH75mnObNna+7dz2l3RpMCtfFa
tnqJ7r/9Yb0cX6+RhlS9tGCubp01V0/sq9DxlmTd++BdunbeHXrg7tv08PoENXX61eELfps+DgMA
ERE51cw9BeCTv7tJGdvXa84139APf3G1rv7NvdqSUitfUahufGSBnnphlZY+OFdzl6xXck6Wtq5b
oWUrXtHC+b/RfS++rOyotfra167S3GfW61BastYseUTX37NQK5ct1i13/1l7og7o0Ruv0xU33K9l
Lz6j22ZfqzezW9Xd2RHk9nw8BgAiInKqmRsA2uTz92p0fEQtRdEK3xetbUvn6ud3PaKn7v2h/u6b
39F//vI6/fKn/6Z/+d0D2pvfrKTXbtG11/5av7jiH/Wftz+u+P1v6Ee/f07pPe+pL32F/jzner1V
NKr33x5Sc3W+msx275o1S7dvKdb4qF8hT3xHS6MbzABw9reXAYCIiJxq5p4C8Ku5Iltx6SXqGjk2
eWX7dd/t9+u267+pX963SjnVzWosz1ZkUrrC19yjnz2xXsWN3crd8YAefeIhRYebAWD280pqHlJb
wjLdNPfEANBSXaCmwijddfe9un9nofr8ldq68PtaEdfIAEBERPRJzdQA0NHVq/rkzbp51q26Y/ES
vfzqOi2+/w+6c/mryowN1U1X36S7lq/VmsX36jdPrtabbz6pebMe0PI167Xgpn/Ttbc+oLjw9brs
+sWKrvFrvL1QLz394IdPAdx6z40K3b9H8+bM0W1bcs0AUKHXHvhnLYliACAiIvrEZmoAaGtr0+Dw
mAJFYVr08L265567dd/SLcpqG5OOv6OyuDWac8vNumX+UwrNatTgYLX2PHavbjWnzZo7X89vjlR5
QZJe3hqpwoZW+QOD6qlK1PLHZuuWW+ZocViJRn2l2rFjh3alVauro0EpYSsUXdgifwevASAiIvrY
ZmoA6O/v15IlS3Tdb27QTTffrJutG/+o3153ja697leqqmvSu+++673lz74NsK3Nr77hkcm3AY5p
qL9H/s7uiY/2tweagaLdHzjxNsDeTrX6zGX6+ry3DNrfCtjdO6RAZ/Db80kYAIiIyKlmagCwf1Uv
Pj5e27dvP83OnTvV0NCgjnM4Up8pDABERORUM/kUgP39/wMDA0F92l/de75d1AMAfwyIiIjOtk/6
Y0BlZWXq6ek57a/nXWrsPl60fw3Q/jngQ4dTVFlVBwDAGUnLzP3IPwecm5urQ4cOKScnx1sYL2V2
H+1TFunp6RfXADAyMqJAoEdl5VUqKa0AAOCM2T/Za9eR6euKfZjePixuVVRUXNKm9rO1tfW0++Kj
XBADgGVv8NGj497kAgDAmbDrhveq+iDrij396NGjQS93KbL7+lH3RTAXzAAAAAA+OwwAAAA46IIZ
AIaHhwEAwHkQbJ2d7nMfAIaGhrzn/48dO6Z33nkHAAB8CnY9HRsb89bXYOvulM99ALA31r5y8cc/
/rF+8pOfAACAc/TTn/5UV155peLi4vTee+8FXXenfO4DwPHjx733Lv7N3/yNXnnlFS1btgwAAJyD
devW6etf/7rWrl3r/aKkYOvulM99ALATSkJCgr73ve8pMTFRUVFRAADgHKSlpemqq67S+vXrL54B
4Lvf/a5iYmIUHh4OAADOgX1E/Wc/+5k2bNjAAAAAgCsYAAAAcBADAAAADmIAAADAQQwAAAA4iAEA
AAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAA
ABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAA
cBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADA
QQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAH
MQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzE
AAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBAD
AAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwA
AAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAA
AOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAA
gIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAA
DmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4
iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAg
BgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMY
AAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIA
AADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEA
AAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAA
ABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAA
cBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADA
QQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAH
MQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzE
AAAAgIMYAAAAcBADAAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBAD
AAAADmIAAADAQQwAAAA4iAEAAAAHMQAAAOAgBgAAABzEAAAAgIMYAAAAcBADAAAADrpoB4DY2FhF
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
6qPWaN4v/qw9VQEzEJz71MYAAAAzb2YHgA5197crd+9q3fHbX+tXZu2w68e1f/qT7jAHlPc9/YYK
eo/p/f5CbVn0vOJyCrVj+w5tTa5UZ1uqXvzdLbp3Uaiq+rrlD7r9s+f0ADD1DX7g/gd0061zNP+u
u3SXcfe99+qOOb/X5f/nf+n71/1ZO3bu0bHjx83C26++vkF1d7Sp3d+l/sGJPx4xZL4hPp9fPb29
6jPTmf3dARXxq3Xd1b/RgmeT5R8OqKMt+G04EwwAADDzZnYAaFebWQf8gV4NmZ/h9ue49d6xY0pM
SNSdd8zTrJtv1I03zdK8O27X7FtvVWhoqMaHB81lO9VvFt/BfrPWtJn1J8i2z4XTA4BdWO3HTZs2
aeXKlad4edWrWrdxg1avWqnY2FgFAva9/sG3cyqf9xsEqzMPaO2Wncpq8Ctwym94OnsMAAAw82Z6
AAjGri32OqevQZZ9fdmZrz1nz+kBYIpdVINdzxT75yHbzmLqsr/sp6OrV0cGB7xf7HAuv/znZAwA
ADDzPo8BwK4tH/Wn3u3ifzZrz9m6qAeAzMxMb3G2O3Ep6+rq8v4TMAAAwMyZGgDq6uq8RTnYz+NL
iV0/CwoKLs4BIDo62vszhvbPGV7qsrKyvKcihoaGGAAAYAaMjY15B1r2TwLbhTHYz+JLiV0/4+Li
Lq4/B2zfM2mPiu3UYm+4/Xgps/to/zPavxwV7P4AAHx6dm2pr6/3ft66tLbYpwPsox/B7pOTXRAD
gGW/UXZicYl95CPYfQEAOD/sowDBfv5eys5k8bcumAEAAAB8dhgAAABwEAMAAAAOYgAAAMBBDAAA
ADiIAQAAAAcxAAAA4CAGAAAAHDTjA8CouQJ7JQAA4MIxNnJEvpkYAKz6zhFvugAAABeexi676M/A
AGDZyQIAAFx4Tl78rfM6AAAAgIsDAwAAAA46twGgd1R1XUe9CwMAgItPtX9MvaPvn/kAMHfubf6h
0fc0MCZvcgAAABefvpH39c770oIFCz+YXOI/vt/+9neNCxYsOmYucMxODQAA4GK08NjCRYuP/eEP
fxifXOKJiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
iIiIiIiIiIiIiIiIHOsLX/j/9+1S+fk+/KUAAAAASUVORK5CYII=</Preview>
  <Form>95Tj1japGg8AACODCAAAAAAABADVVtFu2jAUfZ+0f7DysKeoLRBI0SBSgXab2q4dsO4RmeS2eHVs5DiF7Ot3
k4BKS7o4ZUydkCIc7vE99jk+pnM1/Qm+jrz37wjp5AOikzl0rVESaQgPfjARyEV0cCZVmD9tUvST
TW5ARUyKrnNwlH5s0o+5jhV0BcRaUW6T63jKmX8OyVjeg+hOXZc2/War1m44cHTctoigIXa+xfku
KRMW8WeMBwpLrb4UWkkeWRlT5Hqt5ByUTlaYk1jLkU85DFgIIuWBpS2b1Bqdw3VpGfRSBmB5Z9ip
FNPnDIQesV8IaB47Nmm06qWgr/i0vPXqSstHmip9LSOmcTWW18eGoEa+AijHjmGpLe+TYgEZAVX+
bBtx+oATrsovJA0emU3SYecwK1hXl1sjbdmTy727Q2OfqVzmy/qTRQqUFv5MKssby7lNLuBW22TI
7mbbcm9DL6RPcx1qDXRV0wCSy/2ErgEq95TjujapHxnUj+n0iwhgaXmF1Zsq49YO5EI84zRZvX4m
+GGuuLn+vVhrKfYu/zRrs7P61XV32sVx8pLwm0SNdXebKLtJj0fZaybVWRx8oOH8ozGh7xH0ZTjH
1U85pBMMARsqJu5wC1UMZlPcsCimfKQTDj3q3/clzyR4Ab/pVoxY//7pNk6yd7sadUA1TZPxhsFi
73YNsNkdNnvAZkOIcJaooms5lwvcSDWWJ0EwRI54RVEemez/BnYAHDRUhG8emJ5EHcIdYrNuE2f7
jnzp9BTsmwF2CDS4EjwxdujqBm+hwnW3XencFa7liYElj0PxGSmBupQxHqfc0QVLmxTX/leRfLpk
+nWBvLbWazIZr8lG3a0YyinVfUayYxzJp1kmm9F5U4GcbuHfieN/atJvMahkN5emAVg5+ap7NGO6
T5MaVT/+bzDl86ZcmpEutenGYP018n4D8hT0XBoPAAA=</Form>
  <Code><![CDATA[

#region Control Helper Functions
function Update-DataGridView
{
	<#
	.SYNOPSIS
		This functions helps you load items into a DataGridView.

	.DESCRIPTION
		Use this function to dynamically load items into the DataGridView control.

	.PARAMETER  DataGridView
		The DataGridView control you want to add items to.

	.PARAMETER  Item
		The object or objects you wish to load into the DataGridView's items collection.
	
	.PARAMETER  DataMember
		Sets the name of the list or table in the data source for which the DataGridView is displaying data.

	.PARAMETER AutoSizeColumns
	    Resizes DataGridView control's columns after loading the items.
	#>
	Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Item,
			[Parameter(Mandatory = $false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
	)
	$DataGridView.SuspendLayout()
	$DataGridView.DataMember = $DataMember
	
	if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
	{
		$DataGridView.DataSource = $Item.Tables[0]
	}
	elseif ($Item -is [System.ComponentModel.IListSource]`
			-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
	{
		$DataGridView.DataSource = $Item
	}
	else
	{
		$array = New-Object System.Collections.ArrayList
		
		if ($Item -is [System.Collections.IList])
		{
			$array.AddRange($Item)
		}
		else
		{
			$array.Add($Item)
		}
		$DataGridView.DataSource = $array
	}
	
	if ($AutoSizeColumns -ne 'None')
	{
		$DataGridView.AutoResizeColumns($AutoSizeColumns)
	}
	
	$DataGridView.ResumeLayout()
}

function ConvertTo-DataTable
{
	<#
		.SYNOPSIS
			Converts objects into a DataTable.
	
		.DESCRIPTION
			Converts objects into a DataTable, which are used for DataBinding.
	
		.PARAMETER  InputObject
			The input to convert into a DataTable.
	
		.PARAMETER  Table
			The DataTable you wish to load the input into.
	
		.PARAMETER RetainColumns
			This switch tells the function to keep the DataTable's existing columns.
		
		.PARAMETER FilterWMIProperties
			This switch removes WMI properties that start with an underline.
	
		.EXAMPLE
			$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
	#>
	[OutputType([System.Data.DataTable])]
	param (
			[ValidateNotNull()]
			$InputObject,
			[ValidateNotNull()]
			[System.Data.DataTable]$Table,
			[switch]$RetainColumns,
			[switch]$FilterWMIProperties)
	
	if ($null -eq $Table)
	{
		$Table = New-Object System.Data.DataTable
	}
	
	if ($InputObject -is [System.Data.DataTable])
	{
		$Table = $InputObject
	}
	elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
	{
		$Table = $InputObject.Tables[0]
	}
	else
	{
		if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
		{
			#Clear out the Table Contents
			$Table.Clear()
			
			if ($null -eq $InputObject) { return } #Empty Data
			
			$object = $null
			#find the first non null value
			foreach ($item in $InputObject)
			{
				if ($null -ne $item)
				{
					$object = $item
					break
				}
			}
			
			if ($null -eq $object) { return } #All null then empty
			
			#Get all the properties in order to create the columns
			foreach ($prop in $object.PSObject.Get_Properties())
			{
				if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
				{
					#Get the type from the Definition string
					$type = $null
					
					if ($null -ne $prop.Value)
					{
						try { $type = $prop.Value.GetType() }
						catch { Out-Null }
					}
					
					if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
					{
						[void]$table.Columns.Add($prop.Name, $type)
					}
					else #Type info not found
					{
						[void]$table.Columns.Add($prop.Name)
					}
				}
			}
			
			if ($object -is [System.Data.DataRow])
			{
				foreach ($item in $InputObject)
				{
					$Table.Rows.Add($item)
				}
				return @( ,$Table)
			}
		}
		else
		{
			$Table.Rows.Clear()
		}
		
		foreach ($item in $InputObject)
		{
			$row = $table.NewRow()
			
			if ($item)
			{
				foreach ($prop in $item.PSObject.Get_Properties())
				{
					if ($table.Columns.Contains($prop.Name))
					{
						$row.Item($prop.Name) = $prop.Value
					}
				}
			}
			[void]$table.Rows.Add($row)
		}
	}
	
	return @( ,$Table)
}
#endregion

#region Search Function
function SearchGrid()
{
	$RowIndex = 0
	$ColumnIndex = 0
	$seachString = $textboxSearch.Text
	
	if($seachString -eq "")
	{
		return
	}
	
	if($datagridviewResults.SelectedCells.Count -ne 0)
	{
		$startCell = $datagridviewResults.SelectedCells[0];
		$RowIndex = $startCell.RowIndex
		$ColumnIndex = $startCell.ColumnIndex + 1
	}
	
	$columnCount = $datagridviewResults.ColumnCount
	$rowCount = $datagridviewResults.RowCount
	for(;$RowIndex -lt $rowCount; $RowIndex++)
	{
		$Row = $datagridviewResults.Rows[$RowIndex]
		
		for(;$ColumnIndex -lt $columnCount; $ColumnIndex++)
		{
			$cell = $Row.Cells[$ColumnIndex]
			
			if($null -ne $cell.Value -and $cell.Value.ToString().IndexOf($seachString, [StringComparison]::OrdinalIgnoreCase) -ne -1)
			{
				$datagridviewResults.CurrentCell = $cell
				return
			}
		}
		
		$ColumnIndex = 0
	}
	
	$datagridviewResults.CurrentCell = $null
	[void][System.Windows.Forms.MessageBox]::Show("The search has reached the end of the grid.","String not Found")
	
}
#endregion

$formMain_Load={
	#TODO: Initialize Form Controls here
	& $buttonQuery_Click
}

$buttonExit_Click={
	#TODO: Place custom script here
	$formMain.Close()
}

$buttonQuery_Click= {
	#TODO: Place custom script here
	#	---------------------------------
	#	Sample Code to Load Grid
	#	---------------------------------
	#	$processes = Get-WmiObject Win32_Process -Namespace 'Root\CIMV2'
	#	Update-DataGridView -DataGridView $datagridviewResults -Item $processes -AutoSizeColumns DisplayedCells
	#	---------------------------------
	#	Sample Code to Load Sortable Data
	#	---------------------------------
	# 	$processes = Get-WmiObject Win32_Process -Namespace 'Root\CIMV2'
	#	$table = ConvertTo-DataTable -InputObject $processes -FilterWMIProperties
	#	Update-DataGridView -DataGridView $datagridviewResults -Item $table -AutoSizeColumns DisplayedCells
	$Modules = Get-AutoloadModules
	Update-DataGridView -DataGridView $datagridviewResults -Item $Modules -AutoSizeColumns DisplayedCells
}

$buttonSearch_Click={
	#TODO: Place custom script here
	SearchGrid
}

$datagridviewResults_ColumnHeaderMouseClick=[System.Windows.Forms.DataGridViewCellMouseEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellMouseEventArgs]
	if($datagridviewResults.DataSource -is [System.Data.DataTable])
	{
		$column = $datagridviewResults.Columns[$_.ColumnIndex]
		$direction = [System.ComponentModel.ListSortDirection]::Ascending
		
		if($column.HeaderCell.SortGlyphDirection -eq 'Descending')
		{
			$direction = [System.ComponentModel.ListSortDirection]::Descending
		}

		$datagridviewResults.Sort($datagridviewResults.Columns[$_.ColumnIndex], $direction)
	}
}

$textboxSearch_KeyDown=[System.Windows.Forms.KeyEventHandler]{
#Event Argument: $_ = [System.Windows.Forms.KeyEventArgs]
	if($_.KeyCode -eq 'Enter' -and $buttonSearch.Enabled)
	{
		SearchGrid	
		$_.SuppressKeyPress = $true
	}
}
]]></Code>
  <Mode>0</Mode>
  <Assemblies />
</File>